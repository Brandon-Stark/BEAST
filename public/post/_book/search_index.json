[
["r-markdown.html", "Hello R Markdown 1 R Markdown", " Hello R Markdown Frida Gomam 2015-07-23T21:13:14-05:00 1 R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com. You can embed an R code chunk like this: summary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 fit &lt;- lm(dist ~ speed, data = cars) fit ## ## Call: ## lm(formula = dist ~ speed, data = cars) ## ## Coefficients: ## (Intercept) speed ## -17.579 3.932 "],
["including-plots.html", "2 Including Plots 2.1 ———————————————————————————————– 2.2 ———————————————————————————————– 2.3 引言 2.4 简介 2.5 态度 2.6 安装 2.7 入门 2.8 实战 2.9 引用 2.10 英文网站 2.11 联系我们 2.12 ———————————————————————————————– 2.13 ———————————————————————————————– 2.14 ———————————————————————————————–", " 2 Including Plots You can also embed plots. See Figure 2.1 for example: par(mar = c(0, 1, 0, 1)) pie( c(280, 60, 20), c(&#39;Sky&#39;, &#39;Sunny side of pyramid&#39;, &#39;Shady side of pyramid&#39;), col = c(&#39;#0292D8&#39;, &#39;#F7EA39&#39;, &#39;#C4B632&#39;), init.angle = -50, border = NA ) Figure 2.1: A fancy pie chart. 2.1 ———————————————————————————————– Rob Lanfear 2.2 ———————————————————————————————– 2.3 引言 2.3 PartitionFinder2是目前对大中型数据集（数据类型包括：核苷酸、氨基酸和形态数据）同时检测最合适的分区方案和每个分区方案所对应的最优进化模型的最理想的程序（此观点来自布兰登·史塔克，如引用请注明出处）。 2.3 PartitionFinder2所推演的最优进化模型结果与使用 jModelTest2（检测核苷酸数据）和ProTest3（检测氨基酸数据）所推演的最优进化模型结果是比较接近的（此观点来自布兰登·史塔克，如引用请注明出处）。 2.4 简介 2.4 这次实战的目的只是介绍 PartitionFinder2最重要的功能。 2.4 通过这次实战预期可以达到快速和高效的掌握 PartitionFinder2的一般使用方法。 2.5 态度 2.5 PartitionFinder2的作者 Rob Lanfear在PartitionFinder2 2.1.x手册（18页）里面提到： 我目前最喜欢的用于进化模型选择的度量是AICc。一般来说，用户不应该用AIC，因为AICc与AIC相比始终是最好的。然而，AIC包含在partitionfinder里面大多是因为历史原因。 2.5 PartitionFinder2的作者 Rob Lanfear在PartitionFinder2 2.1.x手册（21页）里面还提到： 一般来说，我不建议在任何情况下使用search = hcluster;这种算法。最好用rcluster这种算法并将--rcluster-max的参数设置为一些非常低的数值（例如，设置--rcluster-max为10）来代替。hcluster这种算法几乎与将rcluster算法的--rcluster-max参数设置为1是相同的。用户可以使用--weights命令行选项来控制hcluster算法。hcluster算法仍然放在PartitionFinder2里面纯粹是为了证明hcluster算法是不可重复使用的。 2.6 安装 使用 Anaconda或者其他程序安装 Python 2.6 PartitionFinder2需要 Python 2.7.10 或者更高版本才能运行，但是不是 Python 3.x版本。 2.6 到目前为止，设置这个最简单的方法就是安装Anaconda Python，这是一个简单的点击安装程序，可以在这里下载：http://continuum.io/downloads。 2.6 遵循Python 2.7图形安装程序的链接，然后打开它并按照提示安装。用户需要确保有2.3.0版本或更高的版本Anaconda Python。如果用户不想安装Anaconda，可以安装用户自己喜欢的Python 2.7.x版本，但是需要不能低于Python 2.7.10版本，然后安装以下依赖包： numpy pandas pytables 2.6 注意，安装的是tables包，而不是pytables(https://www.pytables.org/usersguide/installation.html)包。 2.6 安装的命令是：pip install tables。 2.6 升级的命令是：pip install --user --upgrade tables。 pyparsing scipy sklearn 安装PartitionFinder2 2.6 从PartitionFinder2官网下载最新版本的PartitionFinder2。 2.6 双击以.zip为后缀的文件，它将自动解压。自动解压以后，用户可以得到一个文件夹，例如，PartitionFinder2.1.1。 2.6 把这个文件夹移动到用户想要存放PartitionFinder2的地方即可。 2.7 入门 序列数据 2.7 PartitionFinder2可以支持连续松弛型的PHYLIP格式的序列数据文件，PartitionFinder2中可以默认支持的序列名字符长度的范围是：1-100。 配置文件 2.7 PartitionFinder2的配置文件为partition_finder.cfg，注意，该配置文件的文件名是固定不变的，请不要更改它。 2.7 partition_finder.cfg配置文件里面除了注释和方括号所在行的末尾不用分号结束，其他行的末尾要以分号结束。 2.7 PartitionFinder2的核苷酸配置文件举例如下： # ALIGNMENT FILE ## alignment = test.phy; ## BRANCHLENGTHS: linked | unlinked ## branchlengths = linked; ## MODELS OF EVOLUTION: all | allx | mrbayes | beast | gamma | gammai | &lt;list&gt; ## models = GTR, GTR+G, GTR+I+G; # MODEL SELECCTION: AIC | AICc | BIC # model_selection = AICc; ## DATA BLOCKS: see manual for how to define ## [data_blocks] Gene1_pos1 = 1-789\\3; Gene1_pos2 = 2-789\\3; Gene1_pos3 = 3-789\\3; Gene2_pos1 = 790-1449\\3; Gene2_pos2 = 791-1449\\3; Gene2_pos3 = 792-1449\\3; Gene3_pos1 = 1450-2208\\3; Gene3_pos2 = 1451-2208\\3; Gene3_pos3 = 1452-2208\\3; ## SCHEMES, search: all | user | greedy | rcluster | rclusterf | kmeans ## [schemes] search = greedy; 备注 alignment = test.phy: 2.7 序列数据文件名，本例中为test.phy。 2.7 序列数据文件必须与partition_finder.cfg配置文件放在同一个文件夹里面，并且必须是正确的PHYLIP格式。 2.7 PHYLIP格式的test.phy示例数据文件的信息如下（为了展示的效果，test.phy示例数据文件的后面部分的序列被截短了）： 4 949 AD00P055 SLMLLISSSIVENGAGTGWTVYPPLSSNIAHSGSSVDLAIFSLHLAGISSILGAINFITTIINMKVNNLFFDQMSLFIWAVGITALLLLLSLPVLAGAITMLLTDRNLNT...... RV03N585 SLMLLISSSIVENGAGTGWTVYPPLSSNIAHSGSSVDLAIFSLHLAGISSILGAINFITTIINMKVNNLFFDQMSLFIWAVGITALLLLLSLPVLAGAITMLLTDRNLNT...... TDA99Q996 SLMLLISSSIVENGAGTGWTVYPPLSSNIAHSGSSVDLAIFSLHLAGISSILGAINFITTIINMKVNNMSFDQMSLFIWAVGITALLLLLSLPVLAGAITMLLTDRNLNT...... ZD99S305 SLMLLISSSIVENGAGTGWTVYPPLSSNIAHSGSSVDLAIFSLHLAGISSILGAINFITTIINMKVNNLFFDQMSLFIWAVGITALLLLLSLPVLAGAITMLLTDRNLNT...... user_tree_topology 2.7 这是一个附加选项，可以在alignment行之后添加到partition_finder.cfg配置文件里面。 2.7 如果用户想给 PartitionFinder2提供一个固定的拓扑结构树，而不是依靠软件默认估计的邻接法拓扑结构树，可以使用这个选项。 2.7 如果用户提前知道真正的树是什么，例如，在进行模拟时，这可能是有用的。 2.7 要使用该选项，只需在partition_finder.cfg配置文件里面额外添加一行即可，示例如下： ALIGNMENT FILE # alignment = test.phy; user_tree_topology = tree.phy; 2.7 tree.phy是一个包含NEWICK格式的拓扑学结构树（有或没有枝长）的文件名（不是路径）。文件名可以随意命名，它不必是tree.phy。树文件必须与序列数据文件（test.phy）和partition_finder.cfg配置文件在同一个文件夹中。 2.7 当用户使用此选项时，用户在树文件中提供的拓扑结构将在整个分析中是固定不变的。 2.7 在标准分析中，使用GTR+I+G模型对整个数据集的枝长进行重新估计。 2.7 如果用户不想使用这个选项，可以从partition_finder.cfg配置文件里面忽略带有user_tree_topology的这一行。 branchlengths = linked: 2.7 这个选项决定在用户分析的过程中枝长是如何被估计的。用户如何设置这个选项在一定程度上取决于用户打算用哪一个程序进行最终的系统发育分析。 2.7 几乎所有的系统发育程序都支持相关联的枝长估计，但只有一些程序支持不相关联的枝长估计（例如，MrBayes、BEAST和RAxML）。 2.7 branchlengths = linked的总枝长参数是(2N-3)+(S-1)，其中N代表物种数，S代表子集的数目。例如，如果有50个物种被分成10个子集，那么总枝长的参数就是106。 2.7 branchlengths = unlinked的总枝长参数是2NS-3S,其中N代表物种数，S代表子集的数目。例如，如果有50个物种被分成10个子集，那么总枝长的参数就是970。 models = GTR, GTR+G, GTR+I+G: 2.7 这个选项设置模型选择过程中需要考虑的进化模型。 2.7 如果用户真想要所有可能模型的一个模型列表，可以在以.cfg为后缀的配置文件里面设置以下选项： 2.7 models = allx 2.7 这个模型参数在models = all的基础上还使用最大似然法（+X）而不是经验法（+F）对碱基或者氨基酸频率进行估计。 model_selection = aicc: 2.7 设置用于模型选择的度量。 2.7 如果用户使用search=greedy这个选项的话，它还定义了用于比较分区方案的度量。 [data_blocks]: 2.7 设置数据分区。 2.7 PartitionFinder2可以处理三种类型数据：核苷酸、氨基酸和形态学数据。其中核苷酸数据又可以分为编码区DNA序列和非编码区DNA序列（例如，内含子）。编码区DNA序列根据密码子位置又进一步分为三个分区：第一位密码子、第二位密码子和第三位密码子。 2.7 根据PartitionFinder2软件作者的研究团队发表的 文章，他们推荐用户使用数据分区来告诉 PartitionFinder2尽可能多的关于用户序列的生物学信息。 2.7 设想一个DNA序列数据文件有2208bp的蛋白质编码区，分为三个基因，第一个基因的长度是789，第二个基因的长度是659bp,第三个基因的长度是758bp。那么就可以按照例子中的那样设置。 2.7 氨基酸序列和非编码区DNA序列（例如，内含子）可以按照基因设置数据分区，提供基因的起始和终止位点即可。 2.7 对于形态学数据来说，通常没有直观的方法来定义数据分区。在这种情况下，用户可以尝试k-means算法。 2.8 实战 PartitionFinder2的一般使用方法 对于一个小的多基因座数据集（例如，大约10基因座） 对于DNA序列，用PhyML进行贪婪搜索。 对于氨基酸序列，用RAxML进行贪婪搜索。下面的这些选项分别给出了DNA和氨基酸序列的大多数模型。 2.8 根据基因和密码子位置定义数据分区 2.8 在以.cfg为后缀的配置文件里面设置以下选项： branchlengths = linked; models = all; model_selection = aicc; search = greedy; 2.8 对于DNA数据集，从命令行运行 PartitionFinder2举例如下： C:\\Python27\\python.exe C:\\Users\\BrandonStark\\PartitionFinder\\partitionfinder-2.1.1\\PartitionFinder.py C:\\Users\\BrandonStark\\PartitionFinder\\partitionfinder-2.1.1\\examples\\nucleotide 2.8 对于氨基酸数据集，从命令行运行 PartitionFinder2举例如下： C:\\Python27\\python.exe C:\\Users\\BrandonStark\\PartitionFinder\\partitionfinder-2.1.1\\PartitionFinderProtein.py C:\\Users\\BrandonStark\\PartitionFinder\\partitionfinder-2.1.1\\examples\\aminoacid 对于一个大的数据集（例如，大约100基因座） 对于DNA和氨基酸序列，用RAxML进行贪婪搜索。这通常相当快。 下面的这些选项分别给出了DNA和氨基酸序列的大多数模型。 2.8 根据基因和密码子位置定义数据分区 2.8 在以.cfg为后缀的配置文件里面设置以下选项： branchlengths = linked; models = all; model_selection = AICc; search = greedy; 2.8 对于DNA数据集，使用 RAxML从命令行运行 PartitionFinder2举例如下： C:\\Python27\\python.exe C:\\Users\\BrandonStark\\PartitionFinder\\partitionfinder-2.1.1\\PartitionFinder.py C:\\Users\\BrandonStark\\PartitionFinder\\partitionfinder-2.1.1\\examples\\nucleotide -- raxml 2.8 对于氨基酸数据集，使用 RAxML从命令行运行 PartitionFinder2举例如下： C:\\Python27\\python.exe C:\\Users\\BrandonStark\\PartitionFinder\\partitionfinder-2.1.1\\PartitionFinderProtein.py C:\\Users\\BrandonStark\\PartitionFinder\\partitionfinder-2.1.1\\examples\\aminoacid --raxml 2.8 如果对于氨基酸数据集来说运行太慢的话，可能是因为有很多模型正在进行比较，因此尝试在partition_finder.cfg配置文件里面中指定一个较少的进化模型列表，例如： models = LG, LG+G, LG+I+G, LG+I+G+F, LG4X; 对于一个真正大的数据集（例如，大约1000基因座） 对于这种规模的数据集，贪婪算法很可能太慢。因此，我们可以使用一些更快的算法来尝试和猜测最好的分区方案。 2.8 根据基因和密码子位置定义数据分区 2.8 在以.cfg为后缀的配置文件里面设置以下选项： ```R branchlengths = linked; models = all; model_selection = aicc; search = rcluster; 2.8 对于DNA数据集，使用 RAxML从命令行运行 PartitionFinder2举例如下： C:\\Python27\\python.exe C:\\Users\\BrandonStark\\PartitionFinder\\partitionfinder-2.1.1\\PartitionFinder.py C:\\Users\\BrandonStark\\PartitionFinder\\partitionfinder-2.1.1\\examples\\nucleotide -- raxml 2.8 对于氨基酸数据集，使用 RAxML从命令行运行 PartitionFinder2举例如下： C:\\Python27\\python.exe C:\\Users\\BrandonStark\\PartitionFinder\\partitionfinder-2.1.1\\PartitionFinderProtein.py C:\\Users\\BrandonStark\\PartitionFinder\\partitionfinder-2.1.1\\examples\\aminoacid -- raxml 2.8 这执行的是松弛型聚类算法,要想了解更多关于松弛型聚类算法的有关内容，用户可以浏览 PartitionFinder2作者的团队发表的 文章。如果默认的命令对用户的数据集来说仍然太慢，请从默认的至少rcluster-max = 1000减少到例如rcluster-max = 100。关于这个的解释举例如下： C:\\Python27\\python.exe C:\\Users\\BrandonStark\\PartitionFinder\\partitionfinder-2.1.1\\PartitionFinderProtein.py C:\\Users\\BrandonStark\\PartitionFinder\\partitionfinder-2.1.1\\examples\\aminoacid -- raxml --rcluster-max 100 2.8 rcluser算法给用户在平衡速度（`–rcluster-max）和精度（–rcluster-percent）这两个参数之间有很多的控制权力。 对于形态学数据集 PartitionFinder2目前可以对形态学数据集进行四种不同的进化模型检测： BINARY+G，BINARY+G+A，MULTISTATE+G，MULTISTATE+G+A。所有的这些模型都需要--raxml命令行选项，更多关于对形态学数据集进行操作的细节可以浏览的手册。 BINARY模型针对的是二进制数据集，MULTISTATE模型是MK模型针对的多状态数据集。 用户一次只可以用一个形态学模型分析数据集，这是由于二进制和多状态数据集的选择以及基于用户数据集本身的性质，需要提前决定是否需要为相应的数据集进行一个偏倚矫正（+A选项）。 对于一个给定的数据集，AIC/AICc/BIC方法对选择这些模型不是很合适。 形态学数据集partition_finder.cfg配置文件的设置，举例如下： 2.8 根据形态学数据集的长度定义单一数据分区 2.8 在以.cfg为后缀的配置文件里面设置以下选项： branchlengths = linked; models = multistate+G;; model_selection = aicc; search = kmeans; 2.8 对于形态数据集，从命令行运行 PartitionFinder2举例如下： C:\\Python27\\python.exe C:\\Users\\BrandonStark\\PartitionFinder\\partitionfinder-2.1.1\\PartitionFinderProtein.py C:\\Users\\BrandonStark\\PartitionFinder\\partitionfinder-2.1.1\\examples\\morpholgy -- raxml 命令行选项 还有一些附加的命令，用户可以从命令行将其传给 PartitionFinder2。这些命令可以用来微调用户的分析。 –all-states: 2.8 只影响k-means算法。 2.8 具体来说，此选项限制k-means算法，只生成包含所有可能状态的子集。 –force-restart: 2.8 这将在重新启动运行之前删除以前的所有工作（删除`analysis文件夹）。 2.8 默认情况下是不会这样做的，所以 PartitionFinder2可以使用已经计算的结果。 –min-subset-size: 2.8 默认：100。 2.8 只影响k-means算法。此选项限制k-means算法，只生成至少与min-subset-size一样大小的子集。 2.8 默认值是100个位点，所以默认情况下，k-means算法永远不会生成一个小于100个位点的子集。 –no-ml-tree: 2.8 PartitionFinder2默认从用户的数据中估计一个最大似然树作为分析起始树。 2.8 如果用户加上--no-ml-tree这个命令，那么PartitionFinder2将估计一个邻接法起始树（如果用户使用PhyML）或者一个最大简约法起始树（如果用户使用 RAxML）。 –processors N, -p N: 2.8 默认：使用所有可用的处理器。 2.8 N是用户想要 PartitionFinder2使用处理器的数目。 2.8 但是，如果用户不希望 PartitionFinder2使用所有的处理器，就可以控制这个选项。 4. ##### 例如，设置-p 5将告诉PartitionFinder2一次最多使用5个处理器。 –quick, -q: 2.8 此选项将阻止PartitionFinder2在分析的过程中写入不必要的关于分区方案的总结。 2.8 大多数人不需要使用这个选项，但是如果用户在进行真正的大数据分析，特别是使用贪婪算法的时候，它可以稍微加快速度。 – raxml: 2.8 这个命令告诉 PartitionFinder2使用 RAxML而不是PhyML。 –rcluster-max N: 2.8 默认：1000。 2.8 如果用户想要这个选项的数值无限大，请将其设置为- 1。 –rcluster-percent N: 2.8 默认：10。 2.8 rcluster-max和rcluster-percent一起控制松弛型聚类算法的彻底性。将其中任何一项的数值设置的更高一些往往会使搜索更彻底，但是会更慢。将他们的数值设置的更低一些往往会使搜索更快，但是会更不彻底。 –save-phylofiles: 2.8 这个选项将使 PartitionFinder2写入大量额外的文件到磁盘。 2.8 一般来说，用户不需要使用这个命令。 –weights “Wrate, Wbase, Wmodel, Walpha”: 2.8 默认：–weights 1,0,0,0。 2.8 在聚类算法中使用的权重列表。 2.8 该列表允许用户为一个子集的总替换速率、碱基/氨基酸频率、模型参数和alpha参数（它描述了位点之间的伽玛分布率）分配不同的权重。 Windows系统下PartitionFinder2屏幕打印 INFO | 2018-03-27 18:28:24,769 | config | Loading configuration at ’._finder.cfg’ INFO | 2018-03-27 18:28:24,778 | config | Setting ‘alignment’ to ‘test.phy’ INFO | 2018-03-27 18:28:24,778 | config | Setting ‘branchlengths’ to ‘linked’ INFO | 2018-03-27 18:28:24,779 | parser | Setting ‘models’ to a user-specified list INFO | 2018-03-27 18:28:24,779 | parser | The models included in this analysis are: GTR+I+G, GTR, GTR+G INFO | 2018-03-27 18:28:24,779 | parser | Setting datatype to ‘DNA’ INFO | 2018-03-27 18:28:24,779 | config | Setting ‘model_selection’ to ‘aicc’ INFO | 2018-03-27 18:28:24,785 | config | Setting ‘search’ to ‘greedy’ INFO | 2018-03-27 18:28:24,785 | config | ———————— BEGINNING NEW RUN ——————————- INFO | 2018-03-27 18:28:24,846 | config | Looking for alignment file ‘..phy’… INFO | 2018-03-27 18:28:24,848 | analysis | Beginning Analysis INFO | 2018-03-27 18:28:24,848 | analysis | Removing Schemes in ‘.’ (they will be recalculated from existing subset data) INFO | 2018-03-27 18:28:24,849 | config | Checking previously run configuration data… INFO | 2018-03-27 18:28:24,861 | alignment | Reading alignment file ‘..phy’ INFO | 2018-03-27 18:28:24,894 | analysis | No starting tree file found. INFO | 2018-03-27 18:28:24,897 | phyml | Making BioNJ tree for ._tree_source.phy INFO | 2018-03-27 18:28:25,210 | phyml | Estimating GTR+I+G branch lengths on tree INFO | 2018-03-27 18:28:26,124 | phyml | Branchlength estimation finished INFO | 2018-03-27 18:28:26,125 | analysis | Starting tree with branch lengths is here: ._tree_source.phy_phyml_tree.txt INFO | 2018-03-27 18:28:26,125 | method | Performing greedy analysis INFO | 2018-03-27 18:28:26,125 | progress | PartitionFinder will have to analyse 73 subsets to complete this analysis INFO | 2018-03-27 18:28:26,125 | progress | This will result in 121 schemes being created INFO | 2018-03-27 18:28:26,125 | method | Analysing starting scheme (scheme start_scheme) INFO | 2018-03-27 18:28:26,203 | threadpool | Found 4 cpus INFO | 2018-03-27 18:28:26,599 | progress | Finished subset 1/73, 1.37 percent done INFO | 2018-03-27 18:28:26,631 | progress | Finished subset 2/73, 2.74 percent done INFO | 2018-03-27 18:28:26,776 | progress | Finished subset 3/73, 4.11 percent done INFO | 2018-03-27 18:28:26,841 | progress | Finished subset 4/73, 5.48 percent done INFO | 2018-03-27 18:28:27,115 | progress | Finished subset 5/73, 6.85 percent done INFO | 2018-03-27 18:28:27,551 | progress | Finished subset 6/73, 8.22 percent done INFO | 2018-03-27 18:28:27,867 | progress | Finished subset 7/73, 9.59 percent done INFO | 2018-03-27 18:28:27,887 | progress | Finished subset 8/73, 10.96 percent done INFO | 2018-03-27 18:28:27,917 | progress | Finished subset 9/73, 12.33 percent done INFO | 2018-03-27 18:28:27,954 | method | Greedy algorithm step 1 INFO | 2018-03-27 18:28:28,346 | progress | Finished subset 10/73, 13.70 percent done INFO | 2018-03-27 18:28:29,096 | progress | Finished subset 11/73, 15.07 percent done INFO | 2018-03-27 18:28:29,974 | progress | Finished subset 12/73, 16.44 percent done INFO | 2018-03-27 18:28:30,288 | progress | Finished subset 13/73, 17.81 percent done INFO | 2018-03-27 18:28:30,941 | progress | Finished subset 14/73, 19.18 percent done INFO | 2018-03-27 18:28:31,548 | progress | Finished subset 15/73, 20.55 percent done INFO | 2018-03-27 18:28:31,964 | progress | Finished subset 16/73, 21.92 percent done INFO | 2018-03-27 18:28:32,760 | progress | Finished subset 17/73, 23.29 percent done INFO | 2018-03-27 18:28:32,948 | progress | Finished subset 18/73, 24.66 percent done INFO | 2018-03-27 18:28:33,280 | progress | Finished subset 19/73, 26.03 percent done INFO | 2018-03-27 18:28:33,611 | progress | Finished subset 20/73, 27.40 percent done INFO | 2018-03-27 18:28:33,887 | progress | Finished subset 21/73, 28.77 percent done INFO | 2018-03-27 18:28:34,197 | progress | Finished subset 22/73, 30.14 percent done INFO | 2018-03-27 18:28:34,400 | progress | Finished subset 23/73, 31.51 percent done INFO | 2018-03-27 18:28:34,625 | progress | Finished subset 24/73, 32.88 percent done INFO | 2018-03-27 18:28:35,141 | progress | Finished subset 25/73, 34.25 percent done INFO | 2018-03-27 18:28:35,437 | progress | Finished subset 26/73, 35.62 percent done INFO | 2018-03-27 18:28:35,684 | progress | Finished subset 27/73, 36.99 percent done INFO | 2018-03-27 18:28:35,983 | progress | Finished subset 28/73, 38.36 percent done INFO | 2018-03-27 18:28:36,180 | progress | Finished subset 29/73, 39.73 percent done INFO | 2018-03-27 18:28:36,400 | progress | Finished subset 30/73, 41.10 percent done INFO | 2018-03-27 18:28:36,736 | progress | Finished subset 31/73, 42.47 percent done INFO | 2018-03-27 18:28:37,865 | progress | Finished subset 32/73, 43.84 percent done INFO | 2018-03-27 18:28:38,278 | progress | Finished subset 33/73, 45.21 percent done INFO | 2018-03-27 18:28:38,640 | progress | Finished subset 34/73, 46.58 percent done INFO | 2018-03-27 18:28:39,214 | progress | Finished subset 35/73, 47.95 percent done INFO | 2018-03-27 18:28:39,459 | progress | Finished subset 36/73, 49.32 percent done INFO | 2018-03-27 18:28:39,742 | progress | Finished subset 37/73, 50.68 percent done INFO | 2018-03-27 18:28:39,940 | progress | Finished subset 38/73, 52.05 percent done INFO | 2018-03-27 18:28:40,118 | progress | Finished subset 39/73, 53.42 percent done INFO | 2018-03-27 18:28:40,450 | progress | Finished subset 40/73, 54.79 percent done INFO | 2018-03-27 18:28:41,061 | progress | Finished subset 41/73, 56.16 percent done INFO | 2018-03-27 18:28:41,256 | progress | Finished subset 42/73, 57.53 percent done INFO | 2018-03-27 18:28:41,654 | progress | Finished subset 43/73, 58.90 percent done INFO | 2018-03-27 18:28:41,924 | progress | Finished subset 44/73, 60.27 percent done INFO | 2018-03-27 18:28:42,134 | progress | Finished subset 45/73, 61.64 percent done INFO | 2018-03-27 18:28:42,183 | method | Greedy algorithm step 2 INFO | 2018-03-27 18:28:42,565 | progress | Finished subset 46/73, 63.01 percent done INFO | 2018-03-27 18:28:42,842 | progress | Finished subset 47/73, 64.38 percent done INFO | 2018-03-27 18:28:43,275 | progress | Finished subset 48/73, 65.75 percent done INFO | 2018-03-27 18:28:43,585 | progress | Finished subset 49/73, 67.12 percent done INFO | 2018-03-27 18:28:43,816 | progress | Finished subset 50/73, 68.49 percent done INFO | 2018-03-27 18:28:44,132 | progress | Finished subset 51/73, 69.86 percent done INFO | 2018-03-27 18:28:44,322 | progress | Finished subset 52/73, 71.23 percent done INFO | 2018-03-27 18:28:44,339 | method | Greedy algorithm step 3 INFO | 2018-03-27 18:28:44,967 | progress | Finished subset 53/73, 72.60 percent done INFO | 2018-03-27 18:28:45,645 | progress | Finished subset 54/73, 73.97 percent done INFO | 2018-03-27 18:28:46,799 | progress | Finished subset 55/73, 75.34 percent done INFO | 2018-03-27 18:28:47,676 | progress | Finished subset 56/73, 76.71 percent done INFO | 2018-03-27 18:28:48,267 | progress | Finished subset 57/73, 78.08 percent done INFO | 2018-03-27 18:28:49,032 | progress | Finished subset 58/73, 79.45 percent done INFO | 2018-03-27 18:28:49,144 | method | Greedy algorithm step 4 INFO | 2018-03-27 18:28:49,759 | progress | Finished subset 59/73, 80.82 percent done INFO | 2018-03-27 18:28:49,953 | progress | Finished subset 60/73, 82.19 percent done INFO | 2018-03-27 18:28:50,190 | progress | Finished subset 61/73, 83.56 percent done INFO | 2018-03-27 18:28:50,483 | progress | Finished subset 62/73, 84.93 percent done INFO | 2018-03-27 18:28:50,801 | progress | Finished subset 63/73, 86.30 percent done INFO | 2018-03-27 18:28:50,861 | method | Greedy algorithm step 5 INFO | 2018-03-27 18:28:51,947 | progress | Finished subset 64/73, 87.67 percent done INFO | 2018-03-27 18:28:52,180 | progress | Finished subset 65/73, 89.04 percent done INFO | 2018-03-27 18:28:52,483 | progress | Finished subset 66/73, 90.41 percent done INFO | 2018-03-27 18:28:52,688 | progress | Finished subset 67/73, 91.78 percent done INFO | 2018-03-27 18:28:52,698 | method | Greedy algorithm finished after 5 steps INFO | 2018-03-27 18:28:52,700 | method | Highest scoring scheme is scheme step_4, with aicc score of 10935.186 INFO | 2018-03-27 18:28:52,700 | reporter | Information on best scheme is here: ._scheme.txt INFO | 2018-03-27 18:28:52,703 | main | Total processing time: 0:00:28 (h:m:s) INFO | 2018-03-27 18:28:52,703 | main | Processing complete. Windows系统下PartitionFinder2文件输出 根据以上指令，PartitionFinder2运行完成后，所有的输出都在名叫analysis的一个文件夹里面，它与用户的序列数据文件在同一个文件夹里面。 在analysis这个文件夹里面有很多的输出，但是，一般情况下，用户可能只对其中的三个文件或者文件夹感兴趣，它们的顺序可能是： best_schemes.txt: 2.8 这个最佳分区方案文件有关于发现最佳分区方案的信息，以及用于找到最佳分区方案的设置。 2.8 这包括该方案的详细描述，以及该方案中每个子集选择的分子进化模型。它还包含每个方案在 RAxML和NEXUS格式的一个描述。 subsets folder： 2.8 这个子集文件夹包含每个子集模型选择的分析结果。 2.8 它们都是以.txt为扩展名的文件，其中，用户纳入分析的每个模型以AICc增序的方式列成表（即最好的模型在顶部）。 schemes folder： 2.8 这个方案文件夹包含分析方案的详细信息。 2.8 每一个方案分别在一个以.txt为扩展名的独立文件里面，很像best_scheme.txt文件。 2.9 引用 根据用户的分析，可能需要引用多达三篇文献： 一个是关于PartitionFinder2程序 如果您在任何出版作品中使用此程序，请引用: Lanfear, R., Frandsen, P. B., Wright, A. M., Senfeld, T., Calcott, B. (2016) PartitionFinder 2: new methods for selecting partitioned models of evolution for molecular and morphological phylogenetic analyses. Molecular biology and evolution. DOI: dx.doi.org/10.1093/molbev/msw260. 一个是用户所使用的算法 如果用户使用search = rcluster或者search = hcluster，请引用： Lanfear, R., Calcott, B., Kainer, D., Mayer, C., &amp; Stamatakis, A. (2014). Selecting optimal partitioning schemes for phylogenomic datasets. BMC evolutionary biology, 14(1), 82. 如果用户使用search = kmeans，请引用： Frandsen, P. B., Calcott, B., Mayer, C., &amp; Lanfear, R. (2015). Automatic selection of partitioning schemes for phylogenetic analyses using iterative k-means clustering of site rates. BMC Evolutionary Biology, 15(1), 13. 一个是关于使用PhyML或者RAxML 如果你使用 PartitionFinder2没有——RAxML命令行选项，PartitionFinder2在很大程度上依赖，用PhyML 3.0 版本，所以请引用： New Algorithms and Methods to Estimate Maximum-Likelihood Phylogenies: Assessing the Performance of PhyML 3.0. Guindon S., Dufayard J.F., Lefort V., Anisimova M., Hordijk W., Gascuel O. Systematic Biology, 59(3):307-21, 2010. 如果用户使用-- raxml命令行选项，PartitionFinder2使用RAxML 8.0版本用于计算。如果用户使用这个命令行选项，请引用： A. Stamatakis, RAxML-VI-HPC: maximum likelihood-based phylogenetic analyses with thousands of taxa and mixed models, Bioinformatics 22, 2688–2690 (2006). 2.10 英文网站 想了解更多关于 PartitionFinder2有关的内容请浏览 PartitionFinder2的官方网站 PartitionFinder2。 2.11 联系我们 如果您有任何关于PartitionFinder2相关的问题，欢迎您到我们的计算进化交流群（QQ: 153258468）与我们一起探讨。 2.12 ———————————————————————————————– 2.12.1 Jon Snow 2.12.2 email: 376063966@qq.com 2.12.3 Research Interests: I am broadly interested in bioinformatics, with particular focus on the influenza virus. 2.13 ———————————————————————————————– 2.13.1 Brandon Stark 2.13.2 email: 2049968646@qq.com 2.13.3 Research Interests: better understanding the evolution of emerging human viral pathogens, in particular, fast evolving RNA viruses that have been sampled through time; Inferring evolutionary and population dynamic processes from molecular sequence data; Models of molecular evolution for phylogenetic reconstruction using maximum likelihood and Bayesian inference. I am also interested in empirical and theoretical approaches focusing on the use of experimental evolutionary, population genetic, phylogenetic, and computational methods. 2.14 ———————————————————————————————– "]
]
